import bpy

# Function to create a wall with texture
def create_wall(location, rotation, size, texture_path):
    bpy.ops.mesh.primitive_cube_add(location=location)
    wall = bpy.context.object
    wall.scale = size
    wall.rotation_euler = rotation
    wall.name = "Wall"
    
    # Add texture to the wall
    mat = bpy.data.materials.new(name="WallMaterial")
    mat.use_nodes = True
    bsdf = mat.node_tree.nodes.get("Principled BSDF")
    tex_image = mat.node_tree.nodes.new('ShaderNodeTexImage')
    tex_image.image = bpy.data.images.load(texture_path)
    mat.node_tree.links.new(bsdf.inputs['Base Color'], tex_image.outputs['Color'])
    wall.data.materials.append(mat)
    
    return wall

# Function to create a floor with texture
def create_floor(location, size, texture_path):
    bpy.ops.mesh.primitive_plane_add(location=location)
    floor = bpy.context.object
    floor.scale = size
    floor.name = "Floor"
    
    # Add texture to the floor
    mat = bpy.data.materials.new(name="FloorMaterial")
    mat.use_nodes = True
    bsdf = mat.node_tree.nodes.get("Principled BSDF")
    tex_image = mat.node_tree.nodes.new('ShaderNodeTexImage')
    tex_image.image = bpy.data.images.load(texture_path)
    mat.node_tree.links.new(bsdf.inputs['Base Color'], tex_image.outputs['Color'])
    floor.data.materials.append(mat)
    
    return floor

# Function to create a mirror with realistic reflection
def create_mirror(location, rotation, size):
    bpy.ops.mesh.primitive_plane_add(location=location)
    mirror = bpy.context.object
    mirror.scale = size
    mirror.rotation_euler = rotation
    mirror.name = "Mirror"
    
    # Add reflective material to the mirror
    mat = bpy.data.materials.new(name="MirrorMaterial")
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    links = mat.node_tree.links
    
    # Clear default nodes
    for node in nodes:
        nodes.remove(node)
    
    # Add shader nodes
    output_node = nodes.new(type='ShaderNodeOutputMaterial')
    glossy_node = nodes.new(type='ShaderNodeBsdfGlossy')
    tex_coord = nodes.new(type='ShaderNodeTexCoord')
    mapping = nodes.new(type='ShaderNodeMapping')
    env_tex = nodes.new(type='ShaderNodeTexEnvironment')
    
    # Set node properties
    glossy_node.inputs['Roughness'].default_value = 0.0
    env_tex.image = bpy.data.images.load("path_to_your_environment_texture.hdr")  # Add your environment texture
    
    # Link nodes
    links.new(tex_coord.outputs['Generated'], mapping.inputs['Vector'])
    links.new(mapping.outputs['Vector'], env_tex.inputs['Vector'])
    links.new(env_tex.outputs['Color'], glossy_node.inputs['Color'])
    links.new(glossy_node.outputs[0], output_node.inputs[0])
    
    # Assign material to the mirror
    mirror.data.materials.append(mat)
    
    return mirror

# Create walls with texture
wall_texture_path = "path_to_your_wall_texture.jpg"  # Add your wall texture path
wall1 = create_wall(location=(0, -2, 1), rotation=(0, 0, 0), size=(5, 0.1, 2), texture_path=wall_texture_path)
wall2 = create_wall(location=(0, 2, 1), rotation=(0, 0, 0), size=(5, 0.1, 2), texture_path=wall_texture_path)
wall3 = create_wall(location=(-2.5, 0, 1), rotation=(0, 0, 1.5708), size=(2, 0.1, 2), texture_path=wall_texture_path)
wall4 = create_wall(location=(2.5, 0, 1), rotation=(0, 0, 1.5708), size=(2, 0.1, 2), texture_path=wall_texture_path)

# Create floor with texture
floor_texture_path = "path_to_your_floor_texture.jpg"  # Add your floor texture path
floor = create_floor(location=(0, 0, 0), size=(5, 5, 0.1), texture_path=floor_texture_path)

# Create mirror with realistic reflection
mirror = create_mirror(location=(0, -1.99, 1), rotation=(0, 0, 0), size=(1, 1, 0.01))

# Set up lighting
bpy.ops.object.light_add(type='POINT', radius=1, location=(0, 0, 4))
light = bpy.context.object
light.data.energy = 1000

# Set up the camera
bpy.ops.object.camera_add(location=(0, -4, 2))
camera = bpy.context.object
camera.rotation_euler = (1.3, 0, 0)
bpy.context.scene.camera = camera
